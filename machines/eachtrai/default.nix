{
  inputs,
  config,
  lib,
  pkgs,
  iosevka-pkgs,
  ...
}: {
  imports = [
    # nixos extensions
    inputs.agenix.nixosModules.age
    inputs.home-manager.nixosModules.home-manager
    inputs.disko.nixosModules.disko
    inputs.impermanence.nixosModules.impermanence

    ./hardware-configuration.nix

    ./disks.nix
    ../../configuration/sleep.nix
    ../../configuration/network.nix
    ./home-setup.nix
    ../../role/shell.nix
    ../../role/mpd.nix
  ];

  nix = {
    package = pkgs.nixFlakes;
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
    gc = {
      automatic = true;
      persistent = true;
      options = "--delete-older-than 20d";
    };
  };

  nixpkgs = {
    config = {
      allowUnfree = true;
    };
    overlays = [
      inputs.emacs-overlay.overlay
      (
        final: prev: {
          alsa-ucm-conf = prev.alsa-ucm-conf.overrideAttrs (old: rec {
            # pname = "alsa-ucm-conf";
            # version = "1.2.10";
            # src = pkgs.fetchurl {
            #   url = "mirror://alsa/lib/${pname}-${version}.tar.bz2";
            #   hash = "sha256-nCHj8B/wC6p1jfF+hnzTbiTrtBpr7ElzfpkQXhbyrpc=";
            # };
            patches = [
              (pkgs.fetchpatch {
                # TODO: Remove this patch in the next package upgrade
                name = "rt1318-fix-one.patch";
                url = "https://github.com/alsa-project/alsa-ucm-conf/commit/7e22b7c214d346bd156131f3e6c6a5900bbf116d.patch";
                hash = "sha256-5X0ANXTSRnC9jkvMLl7lA5TBV3d1nwWE57DP6TwliII=";
              })
              (pkgs.fetchpatch {
                # TODO: Remove this patch in the next package upgrade
                name = "rt1318-fix-two.patch";
                url = "https://github.com/alsa-project/alsa-ucm-conf/commit/4e0fcc79b7d517a957e12f02ecae5f3c69fa94dc.patch";
                hash = "sha256-cuZPEEqb8+d1Ak2tA+LVEh6gtGt1X+LiAnfFYMIDCXY=";
              })
            ];
          });
        }
      )
    ];
  };

  fileSystems = {
    "/btrfs" = {
      device = "/dev/mapper/crypted";
      encrypted.label = "crypted";
      fsType = "btrfs";
    };
  };

  boot.resumeDevice = "/dev/mapper/crypted";
  boot.initrd.enable = true;
  boot.initrd.supportedFilesystems = ["btrfs"];
  boot.initrd.systemd.enable = true;
  boot.initrd.systemd.services.rollback = {
    description = "Reset BTRFS root subvolume to empty snapshot";
    # initrd target: root filesystem device is available but not yet mounted. So ensure that this happens in that window.
    wantedBy = ["initrd.target"];
    # ensure the btrfs device is available
    requires = ["dev-mapper-crypted.device"];
    after = ["dev-mapper-crypted.device"];
    # ensure this happens before mounting root
    before = ["sysroot.mount"];
    # Don't establish any dependencies not defined here
    unitConfig.DefaultDependencies = "no";
    # run once and wait for completion before running subsequent systemd units
    serviceConfig.Type = "oneshot";
    script = ''
      mkdir -p /btrfs

      mount /dev/mapper/crypted /btrfs

      # While we're tempted to just delete /root and create
      # a new snapshot from /root-blank, /root is already
      # populated at this point with a number of subvolumes,
      # which makes `btrfs subvolume delete` fail.
      # So, we remove them first.
      #
      # /root contains subvolumes:
      # - /root/var/lib/portables
      # - /root/var/lib/machines
      #
      # I suspect these are related to systemd-nspawn, but
      # since I don't use it I'm not 100% sure.
      # Anyhow, deleting these subvolumes hasn't resulted
      # in any issues so far, except for fairly
      # benign-looking errors from systemd-tmpfiles.
      btrfs subvolume list -o /btrfs/root |
      cut -f9 -d' ' |
      while read subvolume; do
        echo "deleting /$subvolume subvolume..."
        btrfs subvolume delete "/btrfs/$subvolume"
      done &&

      echo "deleting /root subvolume..."
      btrfs subvolume delete /btrfs/root

      echo "restoring blank /root subvolume"
      btrfs subvolume snapshot /btrfs/root-blank /btrfs/root

      umount /btrfs
    '';
  };

  # This will be generated by systemd before persistence so we hardcode it
  fileSystems."/persist".neededForBoot = true;
  environment.persistence."/persist" = {
    hideMounts = true;
    files = [
      "/etc/machine-id"
      "/etc/ssh/ssh_host_rsa_key"
      "/etc/ssh/ssh_host_rsa_key.pub"
      "/etc/ssh/ssh_host_ed25519_key"
      "/etc/ssh/ssh_host_ed25519_key.pub"
    ];
    directories = [
      "/var/lib/bluetooth"
      "/var/lib/nixos"
      "/etc/NetworkManager/system-connections"
    ];
  };

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "eachtrai";
  # Pick only one of the below networking options.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  networking.networkmanager.enable = true; # Easiest to use and most distros use this by default.

  # Set your time zone.
  time.timeZone = "Europe/Copenhagen";

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  #   useXkbConfig = true; # use xkb.options in tty.
  # };

  # hotmount external media
  services.gvfs.enable = true;
  services.udisks2.enable = true;

  hardware.enableAllFirmware = true;
  # sound.enable = true;
  hardware.pulseaudio.enable = false;
  hardware.pulseaudio.package = pkgs.pulseaudioFull;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    jack.enable = true;
    pulse.enable = true;
  };

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  users.mutableUsers = false;
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.root.hashedPasswordFile = "/persist/passwords/root";
  users.users.ftzm = {
    isNormalUser = true;
    extraGroups = ["wheel" "video" "audio" "disk" "networkmanager"]; # Enable ‘sudo’ for the user.
    packages = with pkgs; [
      inputs.agenix.packages.x86_64-linux.agenix
      firefox
      tree
      git
      (((emacsPackagesFor emacs-pgtk).emacsWithPackages) (epkgs: [
        epkgs.treesit-grammars.with-all-grammars
        epkgs.vterm
        pkgs.python3
      ]))
      nixpkgs-fmt
      alejandra
      brightnessctl
      wdisplays
      glib # for gsettings
      tofi
      dmenu-wayland
      swaylock-effects
      gtklock
      swaybg
      fuzzel
      vanilla-dmz #cursor
      pass
      pulseaudio
      pavucontrol
      jq
      gnupg
      wtype # for clip_key
      gnumake
      #gimp
      #libreoffice
    ];
    hashedPasswordFile = "/persist/passwords/ftzm";
  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    neovim
    wget
    curl
    alsaUtils
  ];

  ###########
  ## Age ssh key setup for impermanence
  age.identityPaths = [
    "/persist/etc/ssh/ssh_host_ed25519_key"
  ];
  ###########

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;

  my-home.services.gpg-agent = {
    enable = true;
    enableSshSupport = true;
    pinentryFlavor = "gtk2";
  };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  hardware.bluetooth.enable = true;
  services.blueman.enable = true;

  # Video
  hardware = {
    opengl.enable = true;
    opengl.driSupport = true;
    opengl.driSupport32Bit = true;

    opengl.extraPackages = with pkgs; [
      intel-media-driver
      vaapiVdpau
      libvdpau-va-gl
    ];
  };

  # Sway
  services.dbus.enable = true;
  security.polkit.enable = true;

  #needed for swaylock to work
  security.pam.services.swaylock = {};
  #needed for gtklock to work
  security.pam.services.gtklock = {};

  my-home = {
    programs.foot = {
      enable = true;
      settings = {
        main = {
          font = "iosevka ftzm:medium:size=17";
          # letter-spacing = "-0.2";
        };
        cursor = {color = "282828 ebdbb2";};
        colors = {
          background = "282828";
          foreground = "ebdbb2";
          regular0 = "282828";
          regular1 = "cc241d";
          regular2 = "98971a";
          regular3 = "d79921";
          regular4 = "458588";
          regular5 = "b16286";
          regular6 = "689d6a";
          regular7 = "a89984";
          bright0 = "928374";
          bright1 = "fb4934";
          bright2 = "b8bb26";
          bright3 = "fabd2f";
          bright4 = "83a598";
          bright5 = "d3869b";
          bright6 = "8ec07c";
          bright7 = "ebdbb2";
        };
      };
    };

    programs.waybar = {
      enable = true;
      settings = [
        {
          "bar_id" = "bar-0";
          "ipc" = true;
          "modules-left" = [
            "sway/workspaces"
            "sway/mode"
            "sway/scratchpad"
          ];
          "modules-center" = ["sway/window"];
          "modules-right" = [
            "mpd"
            "idle_inhibitor"
            "pulseaudio"
            "network"
            "cpu"
            "memory"
            "temperature"
            "backlight"
            "keyboard-state"
            "sway/language"
            "battery"
            "clock"
            "tray"
          ];
          "position" = "bottom";
        }
      ];
      # style = ''
      # * {
      # /* `otf-font-awesome` is required to be installed for icons */
      # font-family: iosevka ftzm, FontAwesome, Roboto, Helvetica, Arial, sans-serif;
      # font-size: 13px;
      # }
      # '';
    };
    wayland.windowManager.sway = {
      enable = true;
      wrapperFeatures.gtk = true;
      config = {
        bars = [
          {
            command = "waybar";
            mode = "invisible";
            # hiddenState = "hide";
            # extraConfig = ''
            #   modifier Mod4
            # '';
          }
        ];
        startup = [
          {
            command = "swaymsg output eDP-1 scale 1";
            always = true;
          }
        ];
        modifier = "Mod4";
        terminal = "foot";
        gaps = {
          smartBorders = "on";
          # smartGaps = true;
          # inner = 10;
        };
        window = {
          titlebar = false;
          border = 3;
        };
        keybindings = let
          modifier =
            config.my-home.wayland.windowManager.sway.config.modifier;
          fuzzelCmd = ''
            fuzzel \
              -f iosevkaLig \
              -I \
              -x 15 \
              -y 15 \
              -r 0 \
              -b 282828ff \
              -C 3c3836ff \
              -t ebdbb2ff \
              -s 3c3836ff \
              -S ebdbb2ff \
              -B 4
          '';
        in
          lib.mkOptionDefault {
            "${modifier}+Shift+r" = "reload";
            #"${modifier}+Shift+c" = "kill";
            "${modifier}+space" = "exec tofi-drun --drun-launch=true -c ~/.config/tofi/dmenu";
            # "${modifier}+Shift+b" = "exec splitv";
            "${modifier}+v" = "exec volumectl -D 54 -u up";
            "${modifier}+Shift+v" = "exec volumectl -D 54 -u down";
            "${modifier}+F1" = "exec volumectl toggle-mute";
            "${modifier}+p" = "exec mpc toggle";
            # "${modifier}+Shift+z" = "exec fzf_key.sh";
            "${modifier}+s" = ''mode "system"'';
            # "${modifier}+o" = ''mode "org"'';
            "${modifier}+f" = "exec dired.sh";
            "${modifier}+Shift+z" = "exec clip_key";
            "${modifier}+m" = "exec '[ \"$(swaymsg -t get_bar_config bar-0 | jq -r \".mode\")\" = \"dock\" ] && swaymsg bar mode invisible || swaymsg bar mode dock'";
          };
        modes.system = let
          md = "swaymsg mode default;";
          brightness = let
            toKey = n: {
              name = toString n;
              value = "exec lightctl set ${toString (n + 1)}0%; mode default";
            };
          in
            builtins.listToAttrs (map toKey (lib.lists.range 0 9));
        in
          {
            # "l" = ''exec "${md}${swaylockCmd}"'';
            # "d" = ''exec "${md}echo '?' > /tmp/statuspipe.fifo"'';
            "Escape" = "mode default";
            "Return" = "mode default";
          }
          // brightness;
        # modes.org = let
        #   md = "swaymsg mode default;";
        # in {
        #   "t" = ''exec "${md}capture.sh t"'';
        #   "w" = ''exec "${md}capture.sh w"'';
        #   "Escape" = "mode default";
        #   "Return" = "mode default";
        # };
        colors = {
          focused = {
            background = "#5f676a";
            border = "#000000";
            childBorder = "#458588";
            indicator = "#484e50";
            text = "#ffffff";
          };
          unfocused = {
            background = "#5f676a";
            border = "#000000";
            childBorder = "#282828";
            indicator = "#484e50";
            text = "#ffffff";
          };
        };
      };
      extraConfig = ''
        # for_window [title="capture"] floating enable, resize set 660 300
        # for_window [title="capture"] border pixel 1
        # for_window [app_id="foot-launcher"] floating enable, resize set 400 300
        # for_window [app_id="foot-launcher"] border pixel 1

        # default_border pixel 0

        # smart_gaps on
        # gaps inner 1
        # gaps outer -1


        # hide_edge_borders smart
        seat seat0 xcursor_theme Vanilla-DMZ 64

        set $TBALL1 1149:32792:Kensington_Expert_Wireless_TB_Mouse
        input $TBALL1 {
          scroll_method on_button_down
          scroll_button 275
          scroll_factor 0.3
        }

        set $TBALL2 1149:32793:ExpertBT5.0_Mouse
        input $TBALL2 {
          scroll_method on_button_down
          scroll_button 275
          scroll_factor 0.3
        }

        # exec systemctl --user import-environment XDG_SESSION_TYPE XDG_CURRENT_DESKTOP
        # exec dbus-update-activation-environment WAYLAND_DISPLAY

      '';
    };

    # # currently, there is some friction between sway and gtk:
    # # https://github.com/swaywm/sway/wiki/GTK-3-settings-on-Wayland
    # # the suggested way to set gtk settings is with gsettings
    # # for gsettings to work, we need to tell it where the schemas are
    # # using the XDG_DATA_DIR environment variable
    # # run at the end of sway config
    # configure-gtk = pkgs.writeTextFile {
    #   name = "configure-gtk";
    #   destination = "/bin/configure-gtk";
    #   executable = true;
    #   text = let
    #     schema = pkgs.gsettings-desktop-schemas;
    #     datadir = "${schema}/share/gsettings-schemas/${schema.name}";
    #   in ''
    #     export XDG_DATA_DIRS=${datadir}:$XDG_DATA_DIRS
    #     gnome_schema=org.gnome.desktop.interface
    #     gsettings set $gnome_schema gtk-theme 'Dracula'
    #   '';
    # };

    home.stateVersion = "23.11"; # Did you read the comment?
  };

  my-home.home.pointerCursor = {
    name = "Vanilla-DMZ";
    package = pkgs.vanilla-dmz;
    size = 16;
    gtk.enable = true;
  };

  my-home.services.avizo = {
    enable = true;
    settings = {
      default = {
        time = 1.0;
        y-offset = 0.5;
        fade-in = 0.1;
        fade-out = 0.2;
      };
    };
  };

  programs.dconf.enable = true;

  fonts.packages = with pkgs; [
    jetbrains-mono
    (let
      iosevkaPkgs = inputs.nixpkgs-iosevka.legacyPackages.x86_64-linux;
    in
      iosevkaPkgs.iosevka.override {
        privateBuildPlan = builtins.readFile ./iosevka-build-plan.toml;
        extraParameters = builtins.readFile ./iosevka.toml;
        set = "-ftzm";
      })
  ];

  # ----------------------------------------------------------------------
  # Laptop
  # ----------------------------------------------------------------------

  services.thermald.enable = true;
  services.auto-cpufreq.enable = true;
  hardware.enableRedistributableFirmware = true;
  hardware.cpu.intel.updateMicrocode = true;

  # ----------------------------------------------------------------------

  # # attempt at getting webcam going
  # hardware.ipu6 = {
  #   enable = true;
  #   platform = "ipu6ep";
  # };

  # ----------------------------------------------------------------------

  services.syncthing = {
    enable = true;
    #guiAddress = "localhost:8384";
    openDefaultPorts = true;
    user = "ftzm";
    configDir = "/home/ftzm/.config/syncthing";
    dataDir = "/home/ftzm";
    # I think these mean it doesn't try to merge the configs, and the merging is error prone.
    overrideFolders = true;
    overrideDevices = true;
    devices = {
      nas.id = "FWRAMNZ-PZVPLHQ-HHY3E5G-I7LRHGN-PXTVHMJ-QRL67QH-EBZY3II-UD4IKQM";
      saoiste.id = "72USTHU-DTF5LZP-TPF5URJ-NNYSJW5-JFVNQQW-KKQHJHY-KL7ZCAZ-NC26SQP";
    };
  };

  # ----------------------------------------------------------------------
  # Atuin

  my-home.programs.atuin = {
    enable = true;
    enableBashIntegration = true;
  };

  # ----------------------------------------------------------------------

  my-home.programs.git = {
    enable = true;
    ignores = [
      # Emacs
      "**/*~"
      "**/*#"
      # Python
      ".mypy_cache"
      # direnv
      ".direnv"
      # Haskell
      "*.hi"
      "*.o"
      # Nix
      "result"
    ];
    userEmail = "m@ftzm.org";
    userName = "ftzm";
    extraConfig = {
      status = {
        showUntrackedFiles = "all"; # allows magit to show dir contents
      };
    };
  };

  system.stateVersion = "23.11";
}
