{
  inputs,
  config,
  lib,
  pkgs,
  iosevka-pkgs,
  ...
}: {
  imports = [
    # nixos extensions
    inputs.agenix.nixosModules.age
    inputs.home-manager.nixosModules.home-manager
    inputs.disko.nixosModules.disko
    inputs.impermanence.nixosModules.impermanence
    inputs.nixos-hardware.nixosModules.dell-latitude-9430

    # System specific
    ./hardware-configuration.nix
    ./disks.nix
    # ./patched-alsa-ucm-conf.nix # can probably be removed after updating nixpkgs, my patch was merged

    # Generic
    ../../role/home-setup.nix
    ../../role/network.nix
    ../../role/mpd.nix
    ../../role/sleep.nix
    ../../role/shell.nix
    ../../role/comms.nix
    ../../role/git.nix
    ../../role/interface.nix
    ../../role/iosevka.nix
  ];

  nix = {
    # package = pkgs.nixFlakes;
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
    gc = {
      automatic = true;
      persistent = true;
      options = "--delete-older-than 20d";
    };
  };

  nixpkgs = {
    config = {
      allowUnfree = true;
    };
    overlays = [
      inputs.emacs-overlay.overlay
    ];
  };

  fileSystems = {
    "/btrfs" = {
      device = "/dev/mapper/crypted";
      encrypted.label = "crypted";
      fsType = "btrfs";
    };
  };

  boot.initrd.enable = true;
  boot.initrd.supportedFilesystems = ["btrfs"];
  boot.initrd.systemd.enable = true;
  swapDevices = [
    {
      device = "/.swapvol/swapfile";
      size = 32 * 1024;
    }
  ];
  # inspo: https://discourse.nixos.org/t/impermanence-and-hibernation/39955/13
  boot.initrd.systemd.services.rollback = {
    description = "Reset BTRFS root subvolume to empty snapshot";
    # initrd target: root filesystem device is available but not yet mounted. So ensure that this happens in that window.
    wantedBy = ["initrd.target"];
    # ensure the btrfs device is available
    requires = [
      "dev-mapper-crypted.device"
      "initrd-root-device.target"
    ];
    after = [
      "initrd-root-device.target"
      "dev-mapper-crypted.device"
      "local-fs-pre.target"
    ];
    # ensure this happens before mounting root
    before = [
      "sysroot.mount"
      "create-needed-for-boot-dirs.service"
    ];
    # Don't establish any dependencies not defined here
    unitConfig.DefaultDependencies = "no";
    # run once and wait for completion before running subsequent systemd units
    serviceConfig.Type = "oneshot";
    script = ''
      mkdir -p /btrfs

      mount /dev/mapper/crypted /btrfs

      # While we're tempted to just delete /root and create
      # a new snapshot from /root-blank, /root is already
      # populated at this point with a number of subvolumes,
      # which makes `btrfs subvolume delete` fail.
      # So, we remove them first.
      #
      # /root contains subvolumes:
      # - /root/var/lib/portables
      # - /root/var/lib/machines
      #
      # I suspect these are related to systemd-nspawn, but
      # since I don't use it I'm not 100% sure.
      # Anyhow, deleting these subvolumes hasn't resulted
      # in any issues so far, except for fairly
      # benign-looking errors from systemd-tmpfiles.
      btrfs subvolume list -o /btrfs/root |
      cut -f9 -d' ' |
      while read subvolume; do
        echo "deleting /$subvolume subvolume..."
        btrfs subvolume delete "/btrfs/$subvolume"
      done &&

      echo "deleting /root subvolume..."
      btrfs subvolume delete /btrfs/root

      echo "restoring blank /root subvolume"
      btrfs subvolume snapshot /btrfs/root-blank /btrfs/root

      umount /btrfs
    '';
  };

  # This will be generated by systemd before persistence so we hardcode it
  fileSystems."/persist".neededForBoot = true;
  environment.persistence."/persist" = {
    hideMounts = true;
    files = [
      "/etc/machine-id"
      "/etc/ssh/ssh_host_rsa_key"
      "/etc/ssh/ssh_host_rsa_key.pub"
      "/etc/ssh/ssh_host_ed25519_key"
      "/etc/ssh/ssh_host_ed25519_key.pub"
    ];
    directories = [
      "/var/lib/bluetooth"
      "/var/lib/nixos"
      "/etc/NetworkManager/system-connections"
    ];
  };

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "eachtrai";
  # Pick only one of the below networking options.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  networking.networkmanager.enable = true; # Easiest to use and most distros use this by default.

  # Set your time zone.
  time.timeZone = "Europe/Copenhagen";

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  #   useXkbConfig = true; # use xkb.options in tty.
  # };

  # hotmount external media
  services.devmon.enable = true;
  services.gvfs.enable = true;
  services.udisks2.enable = true;

  hardware.enableAllFirmware = true;
  services.pulseaudio.enable = false;
  hardware.pulseaudio.package = pkgs.pulseaudioFull;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    jack.enable = true;
    pulse.enable = true;
  };

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  users.mutableUsers = false;
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.root.hashedPasswordFile = "/persist/passwords/root";
  users.users.ftzm = {
    isNormalUser = true;
    extraGroups = ["wheel" "video" "audio" "disk" "networkmanager" "docker" "libvirtd"]; # Enable ‘sudo’ for the user.
    packages = with pkgs; [
      inputs.agenix.packages.x86_64-linux.agenix
      firefox
      zathura
      tree
      git
      (((emacsPackagesFor emacs-pgtk).emacsWithPackages) (epkgs: [
        epkgs.treesit-grammars.with-all-grammars
        epkgs.vterm
        pkgs.python3
      ]))
      nixpkgs-fmt
      alejandra
      brightnessctl
      wdisplays
      glib # for gsettings
      tofi
      dmenu-wayland
      swaylock-effects
      gtklock
      swaybg
      fuzzel
      vanilla-dmz #cursor
      pass
      pulseaudio
      pavucontrol
      jq
      gnupg
      wtype # for clip_key
      gnumake
      #gimp
      #libreoffice
      nil
      wine
      (let
        lutrisPkgs = import inputs.nixpkgs-lutris {
          system = "x86_64-linux"; # whatever your system name is
          config = {
            allowUnfree = true;
            allowUnfreePredicate = _: true;
          };
        };
      in
        lutrisPkgs.lutris)
      zip
      unzip
      chromium
      pgformatter
      wakeonlan
      nodejs_20
    ];
    hashedPasswordFile = "/persist/passwords/ftzm";
  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    neovim
    wget
    curl
    alsa-utils
    git
    gnumake
  ];

  ###########
  ## Age ssh key setup for impermanence
  age.identityPaths = [
    "/persist/etc/ssh/ssh_host_ed25519_key"
  ];
  ###########

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  hardware.bluetooth.enable = true;
  services.blueman.enable = true;

  # Video
  hardware = {
    graphics.enable = true;
    graphics.enable32Bit = true;
    graphics.extraPackages = with pkgs; [
      intel-media-driver
      vaapiVdpau
      libvdpau-va-gl
    ];
  };

  hardware.ipu6 = {
    enable = true;
    platform = "ipu6ep";
  };

  hm.home.stateVersion = "23.11"; # Did you read the comment?
  hm.home.activation = {
    myActivationAction = inputs.home-manager.lib.hm.dag.entryAfter ["writeBoundary"] ''
      cd /home/ftzm/dots
      ${pkgs.stow}/bin/stow -t $HOME --no-folding dotfiles
    '';
  };

  programs.dconf.enable = true;

  # ----------------------------------------------------------------------
  # Laptop
  # ----------------------------------------------------------------------

  services.thermald.enable = true;
  # services.auto-cpufreq.enable = true; temp disable for gnome
  hardware.enableRedistributableFirmware = true;
  hardware.cpu.intel.updateMicrocode = true;

  system.activationScripts = {
    # This un-breaks hibernate.
    # See: https://github.com/intel/ipu6-drivers/pull/116
    fixHibernate = lib.stringAfter ["usrbinenv"] ''
      echo 0 > /sys/power/pm_async
    '';
  };

  # ----------------------------------------------------------------------

  # services.syncthing = {
  #   enable = true;
  #   #guiAddress = "localhost:8384";
  #   openDefaultPorts = true;
  #   user = "ftzm";
  #   configDir = "/home/ftzm/.config/syncthing";
  #   dataDir = "/home/ftzm";
  #   # I think these mean it doesn't try to merge the configs, and the merging is error prone.
  #   overrideFolders = true;
  #   overrideDevices = true;
  #   settings.devices = {
  #     nas.id = "FWRAMNZ-PZVPLHQ-HHY3E5G-I7LRHGN-PXTVHMJ-QRL67QH-EBZY3II-UD4IKQM";
  #     saoiste.id = "72USTHU-DTF5LZP-TPF5URJ-NNYSJW5-JFVNQQW-KKQHJHY-KL7ZCAZ-NC26SQP";
  #   };
  # };

  # ----------------------------------------------------------------------
  # Atuin

  hm.programs.atuin = {
    enable = true;
    enableBashIntegration = true;
    settings = {
      auto_sync = true;
      sync_frequency = "5m";
      sync_address = "http://wg-nuc:8889";
      search_mode = "fuzzy";
      sync = {
        records = true;
      };
    };
  };

  # ----------------------------------------------------------------------

  services.fwupd.enable = true;

  # ----------------------------------------------------------------------

  virtualisation.docker.enable = true;

  # ----------------------------------------------------------------------

  system.stateVersion = "23.11";

  # ----------------------------------------------------------------------
  # Temporary workaround for impermanence, see more here: https://github.com/nix-community/impermanence/issues/229
  # check for updates and better solutions
  boot.initrd.systemd.suppressedUnits = ["systemd-machine-id-commit.service"];
  systemd.suppressedSystemUnits = ["systemd-machine-id-commit.service"];

  # ----------------------------------------------------------------------
  # Gnome baby

  # services.xserver.enable = true;
  # services.xserver.displayManager.gdm.enable = true;
  # services.xserver.desktopManager.gnome.enable = true;

  # ----------------------------------------------------------------------
  networking.firewall.enable = false;

  # ----------------------------------------------------------------------
  virtualisation.libvirtd = {
    enable = true;
    qemu = {
      package = pkgs.qemu_kvm;
      runAsRoot = true;
      swtpm.enable = true;
      ovmf = {
        enable = true;
        packages = [
          (pkgs.OVMF.override {
            secureBoot = true;
            tpmSupport = true;
          })
          .fd
        ];
      };
    };
  };
  programs.virt-manager.enable = true;
  hardware.keyboard.qmk.enable = true;

  # ----
  fonts.packages = with pkgs; [
    mononoki
  ];
}
